// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                String         @id @default(cuid())
  clerkId           String         @unique
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  createdSubreddits Subreddit[]    @relation("CreatedBy")
  Post              Post[]
  votes             Vote[]
  CommentVote       CommentVote[]
  Subscription      Subscription[]
  Comment           Comment[]
}

model Subreddit {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  creatorId   String?
  creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]

  @@index([name])
}

model Subscription {
  user   User?   @relation(fields: [userId], references: [clerkId])
  userId String

  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String

  @@id([userId, subredditId])
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String

  author   User?   @relation(fields: [authorId], references: [clerkId])
  authorId String?

  comments Comment[]

  votes Vote[]
}

model Comment {
  id        String   @id @default(cuid())
  text      String?
  createdAt DateTime @default(now())

  author   User?   @relation(fields: [authorId], references: [clerkId])
  authorId String

  post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
}

enum VoteType {
  UP
  DOWN
}

model Vote {
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  user   User?   @relation(fields: [userId], references: [clerkId])
  userId String

  voteType VoteType

  @@id([postId, userId])
}

model CommentVote {
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String
  user      User     @relation(fields: [userId], references: [clerkId])
  userId    String

  voteType String?

  @@id([commentId, userId])
}
